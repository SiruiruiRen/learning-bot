Metadata-Version: 2.4
Name: solbot
Version: 0.1.0
Summary: Self-regulated Online Learning Bot
Author-email: SoLBot Team <example@example.com>
Project-URL: Homepage, https://github.com/yourusername/solbot
Project-URL: Bug Tracker, https://github.com/yourusername/solbot/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: <3.13,>=3.9
Description-Content-Type: text/markdown
Requires-Dist: crewai==0.5.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: fastapi>=0.103.0
Requires-Dist: uvicorn>=0.23.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: langchain>=0.0.27
Requires-Dist: openai>=1.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.10.0; extra == "dev"

# SoLBot - Self-regulated Online Learning Bot

SoLBot is a self-regulated learning platform that helps students develop effective learning strategies through a phase-based agent system. This implementation uses CrewAI to coordinate multiple specialist agents.

## Features

- **Phase-based Learning Model**: Specialist agents for different aspects of the learning process
- **YAML Configuration**: Easily customizable agents, tasks, and flows
- **JSON-structured Responses**: Clean integration with frontend components
- **Scaffolding Support**: Adaptive responses based on learner's needs
- **API Integration**: FastAPI-based REST API for frontend communication

## Installation

1. Set up your Python environment (requires Python 3.10+):

```bash
# Create and activate a virtual environment
python -m venv .venv
source .venv/bin/activate  # On Windows: .venv\Scripts\activate

# Install dependencies
pip install -e .
```

2. Configure environment variables:

Create a `.env` file in the root directory with:

```
OPENAI_API_KEY=your_openai_api_key
PORT=8000
```

## Architecture

SoLBot uses a CrewAI-based architecture with:

1. **Manager Agent**: Routes messages to the appropriate specialist agent
2. **Specialist Agents**:
   - Intro Agent: User onboarding and profile collection
   - Phase 2 Agent: Task understanding and resource identification
   - Phase 4 Agent: Learning strategy selection
   - Phase 5 Agent: Reflection and progress monitoring
   - Summary Agent: Overview of learning journey

## Running

Start the API server:

```bash
python main.py
```

The API will be available at `http://localhost:8000`.

## API Endpoints

- `POST /api/chat`: Process a chat message
- `GET /api/health`: Health check endpoint

## Configuration

All agents, tasks, and flows are configured through YAML files in the `config` directory:

- `agents.yaml`: Agent definitions with roles, goals, and backstories
- `tasks.yaml`: Task definitions for different learning activities
- `flows.yaml`: Flow definitions for orchestrating tasks

## Frontend Integration

This backend is designed to work with the existing SoLBot frontend, which specifies the phase parameter to control agent selection. 
